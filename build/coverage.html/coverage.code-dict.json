{"/home/travis/build/npmtest/node-npmtest-express-hbs/test.js":"/* istanbul instrument in package npmtest_express_hbs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-hbs/lib.npmtest_express_hbs.js":"/* istanbul instrument in package npmtest_express_hbs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_hbs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_hbs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-hbs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-hbs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_hbs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_hbs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_hbs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_express_hbs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_hbs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_express_hbs.__dirname + '/lib.npmtest_express_hbs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-hbs/node_modules/express-hbs/index.js":"module.exports = require('./lib/hbs');\n","/home/travis/build/npmtest/node-npmtest-express-hbs/node_modules/express-hbs/lib/hbs.js":"'use strict';\n\nvar fs = require('fs');\nvar path = require('path');\nvar readdirp = require('readdirp');\nvar handlebars = require('handlebars');\nvar async = require('./async');\n\n/**\n * Regex pattern for layout directive. {{!< layout }}\n */\nvar layoutPattern = /{{!<\\s+([A-Za-z0-9\\._\\-\\/]+)\\s*}}/;\n\n/**\n * Constructor\n */\nvar ExpressHbs = function() {\n  this.handlebars = handlebars.create();\n  this.SafeString = this.handlebars.SafeString;\n  this.Utils = this.handlebars.Utils;\n  this.beautify = null;\n  this.beautifyrc = null;\n  this.cwd = process.cwd();\n};\n\n/**\n * Defines a block into which content is inserted via `content`.\n *\n * @example\n * In layout.hbs\n *\n *  {{{block \"pageStylesheets\"}}}\n */\nExpressHbs.prototype.block = function(name) {\n  var val = (this.blocks[name] || []).join('\\n');\n  // free mem\n  this.blocks[name] = null;\n  return val;\n};\n\n/**\n * Defines content for a named block declared in layout.\n *\n * @example\n *\n * {{#contentFor \"pageStylesheets\"}}\n * <link rel=\"stylesheet\" href='{{{URL \"css/style.css\"}}}' />\n * {{/contentFor}}\n */\nExpressHbs.prototype.content = function(name, options, context) {\n  var block = this.blocks[name] || (this.blocks[name] = []);\n  block.push(options.fn(context));\n};\n\n/**\n * Returns the layout filepath given the template filename and layout used.\n * Backward compatible with specifying layouts in locals like 'layouts/foo',\n * but if you have specified a layoutsDir you can specify layouts in locals with just the layout name.\n *\n * @param {String} filename Path to template file.\n * @param {String} layout Layout path.\n */\nExpressHbs.prototype.layoutPath = function(filename, layout) {\n  var dirs,\n    layoutPath;\n  if (layout[0] === '.') {\n    dirs = path.dirname(filename);\n  } else if (this.layoutsDir) {\n    dirs = this.layoutsDir;\n  } else {\n    dirs = this.viewsDir;\n  }\n  [].concat(dirs).forEach(function (dir) {\n    if (!layoutPath) {\n      layoutPath = path.resolve(dir, layout);\n    }\n  });\n  return layoutPath;\n};\n\n/**\n * Find the path of the declared layout in `str`, if any\n *\n * @param  {String} str The template string to parse\n * @param {String} filename Path to template\n * @returns {String|undefined} Returns the path to layout.\n */\nExpressHbs.prototype.declaredLayoutFile = function(str, filename) {\n  var matches = str.match(layoutPattern);\n  if (matches) {\n    var layout = matches[1];\n    // behave like `require`, if '.' then relative, else look in\n    // usual location (layoutsDir)\n    if (this.layoutsDir && layout[0] !== '.') {\n      layout = path.resolve(this.layoutsDir, layout);\n    }\n    return path.resolve(path.dirname(filename), layout);\n  }\n};\n\n/**\n * Compiles a layout file.\n *\n * The function checks whether the layout file declares a parent layout.\n * If it does, the parent layout is loaded recursively and checked as well\n * for a parent layout, and so on, until the top layout is reached.\n * All layouts are then returned as a stack to the caller via the callback.\n *\n * @param {String}      layoutFile  The path to the layout file to compile\n * @param {Boolean}     useCache    Cache the compiled layout?\n * @param {Function}    cb          Callback called with layouts stack\n */\nExpressHbs.prototype.cacheLayout = function(layoutFile, useCache, cb) {\n  var self = this;\n\n  // assume hbs extension\n  if (path.extname(layoutFile) === '') layoutFile += this._options.extname;\n\n  // path is relative in directive, make it absolute\n  var layoutTemplates = this.cache[layoutFile];\n  if (layoutTemplates) return cb(null, layoutTemplates);\n\n  fs.readFile(layoutFile, 'utf8', function(err, str) {\n    if (err) return cb(err);\n\n    //  File path of eventual declared parent layout\n    var parentLayoutFile = self.declaredLayoutFile(str, layoutFile);\n\n    // This function returns the current layout stack to the caller\n    var _returnLayouts = function(layouts) {\n      var currentLayout;\n      layouts = layouts.slice(0);\n      currentLayout = self.compile(str, layoutFile);\n      layouts.push(currentLayout);\n      if (useCache) {\n        self.cache[layoutFile] = layouts.slice(0);\n      }\n      cb(null, layouts);\n    };\n\n    if (parentLayoutFile) {\n      // Recursively compile/cache parent layouts\n      self.cacheLayout(parentLayoutFile, useCache, function(err, parentLayouts) {\n        if (err) return cb(err);\n        _returnLayouts(parentLayouts);\n      });\n    } else {\n      // No parent layout: return current layout with an empty stack\n      _returnLayouts([]);\n    }\n  });\n};\n\n/**\n * Cache partial templates found under directories configure in partialsDir.\n */\nExpressHbs.prototype.cachePartials = function(cb) {\n  var self = this;\n\n  if (!(this.partialsDir instanceof Array)) {\n    this.partialsDir = [this.partialsDir];\n  }\n\n  // Use to iterate all folder in series\n  var count = 0;\n\n  function readNext() {\n    readdirp({root: self.partialsDir[count], fileFilter: '*' + self._options.extname})\n    .on('warn', function(err) {\n      console.warn('Non-fatal error in express-hbs cachePartials.', err);\n    })\n    .on('error', function(err) {\n      console.error('Fatal error in express-hbs cachePartials', err);\n      return cb(err);\n    })\n    .on('data', function(entry) {\n      if (!entry) return;\n      var source = fs.readFileSync(entry.fullPath, 'utf8');\n      var dirname = path.dirname(entry.path);\n      dirname = dirname === '.' ? '' : dirname + '/';\n\n      var name = dirname + path.basename(entry.name, path.extname(entry.name));\n      // fix the path in windows\n      name = name.split('\\\\').join('/');\n      self.registerPartial(name, source, entry.fullPath);\n    })\n    .on('end', function() {\n      count += 1;\n\n      // If all directories aren't read, read the next directory\n      if (count < self.partialsDir.length) {\n        readNext();\n      } else {\n        self.isPartialCachingComplete = true;\n        if (cb) cb(null, true);\n      }\n    });\n  }\n\n  readNext();\n};\n\n/**\n * Express 3.x template engine compliance.\n *\n * @param {Object} options = {\n *   handlebars: \"override handlebars\",\n *   defaultLayout: \"path to default layout\",\n *   partialsDir: \"absolute path to partials (one path or an array of paths)\",\n *   layoutsDir: \"absolute path to the layouts\",\n *   extname: \"extension to use\",\n *   contentHelperName: \"contentFor\",\n *   blockHelperName: \"block\",\n *   beautify: \"{Boolean} whether to pretty print HTML\",\n *   onCompile: function(self, source, filename) {\n *       return self.handlebars.compile(source);\n *   }\n * }\n */\nExpressHbs.prototype.express3 = function(options) {\n  var self = this;\n\n  // Set defaults\n  if (!options) options = {};\n  if (!options.extname) options.extname = '.hbs';\n  if (!options.contentHelperName) options.contentHelperName = 'contentFor';\n  if (!options.blockHelperName) options.blockHelperName = 'block';\n  if (!options.templateOptions) options.templateOptions = {};\n  if (options.handlebars) this.handlebars = options.handlebars;\n  if (options.onCompile) this.onCompile = options.onCompile;\n\n  this._options = options;\n  if (this._options.handlebars) this.handlebars = this._options.handlebars;\n\n  if (options.i18n) {\n    var i18n = options.i18n;\n    this.handlebars.registerHelper('__', function() {\n      var args = Array.prototype.slice.call(arguments);\n      var options = args.pop();\n      return i18n.__.apply(options.data.root, args);\n    });\n    this.handlebars.registerHelper('__n', function() {\n      var args = Array.prototype.slice.call(arguments);\n      var options = args.pop();\n      return i18n.__n.apply(options.data.root, args);\n    });\n  }\n\n  this.handlebars.registerHelper(this._options.blockHelperName, function(name, options) {\n    var val = self.block(name);\n    if (val === '' && typeof options.fn === 'function') {\n      val = options.fn(this);\n    }\n    // blocks may have async helpers\n    if (val.indexOf('__aSyNcId_') >= 0) {\n      if (self.asyncValues) {\n        Object.keys(self.asyncValues).forEach(function (id) {\n          val = val.replace(id, self.asyncValues[id]);\n          val = val.replace(self.Utils.escapeExpression(id), self.Utils.escapeExpression(self.asyncValues[id]));\n        });\n      }\n    }\n    return val;\n  });\n\n  // Pass 'this' as context of helper function to don't lose context call of helpers.\n  this.handlebars.registerHelper(this._options.contentHelperName, function(name, options) {\n    return self.content(name, options, this);\n  });\n\n  // Absolute path to partials directory.\n  this.partialsDir = this._options.partialsDir;\n\n  // Absolute path to the layouts directory\n  this.layoutsDir = this._options.layoutsDir;\n\n  // express passes this through ___express func, gulp pass in an option\n  this.viewsDir = null;\n  this.viewsDirOpt = this._options.viewsDir;\n\n  // Cache for templates, express 3.x doesn't do this for us\n  this.cache = {};\n\n  // Blocks for layouts. Is this safe? What happens if the same block is used on multiple connections?\n  // Isn't there a chance block and content  are not in sync. The template and layout are processed asynchronously.\n  this.blocks = {};\n\n  // Holds the default compiled layout if specified in options configuration.\n  this.defaultLayoutTemplates = null;\n\n  // Keep track of if partials have been cached already or not.\n  this.isPartialCachingComplete = false;\n\n  return this.___express.bind(this);\n};\n\n/**\n * Express 4.x template engine compliance.\n *\n * @param {Object} options = {\n *   handlebars: \"override handlebars\",\n *   defaultLayout: \"path to default layout\",\n *   partialsDir: \"absolute path to partials (one path or an array of paths)\",\n *   layoutsDir: \"absolute path to the layouts\",\n *   extname: \"extension to use\",\n *   contentHelperName: \"contentFor\",\n *   blockHelperName: \"block\",\n *   beautify: \"{Boolean} whether to pretty print HTML\"\n * }\n */\nExpressHbs.prototype.express4 = ExpressHbs.prototype.express3;\n\n/**\n * Tries to load the default layout.\n *\n * @param {Boolean} useCache Whether to cache.\n */\nExpressHbs.prototype.loadDefaultLayout = function(useCache, cb) {\n  var self = this;\n  if (!this._options.defaultLayout) return cb();\n  if (useCache && this.defaultLayoutTemplates) return cb(null, this.defaultLayoutTemplates);\n\n  this.cacheLayout(this._options.defaultLayout, useCache, function(err, templates) {\n    if (err) return cb(err);\n    self.defaultLayoutTemplates = templates.slice(0);\n    return cb(null, templates);\n  });\n};\n\n/**\n * Expose useful methods.\n */\nExpressHbs.prototype.registerHelper = function(name, fn) {\n  this.handlebars.registerHelper(name, fn);\n};\n\n/**\n * Registers a partial.\n *\n * @param {String} name The name of the partial as used in a template.\n * @param {String} source String source of the partial.\n */\nExpressHbs.prototype.registerPartial = function(name, source, filename) {\n  this.handlebars.registerPartial(name, this.compile(source, filename));\n};\n\n/**\n * Compiles a string.\n *\n * @param {String} source The source to compile.\n * @param {String} filename The path used to embed into __filename for errors.\n */\nExpressHbs.prototype.compile = function(source, filename) {\n  // Handlebars has a bug with comment only partial causes errors. This must\n  // be a string so the block below can add a space.\n  if (typeof source !== 'string') {\n    throw new Error('registerPartial must be a string for empty comment workaround');\n  }\n  if (source.indexOf('}}') === source.length - 2) {\n    source += ' ';\n  }\n\n  var compiled;\n  if (this.onCompile) {\n    compiled = this.onCompile(this, source, filename);\n  } else {\n    compiled = this.handlebars.compile(source);\n  }\n\n  if (filename) {\n    if (Array.isArray(this.viewsDir) && this.viewsDir.length > 0) {\n      compiled.__filename = path.relative(this.cwd, filename).replace(path.sep, '/');\n    } else {\n      compiled.__filename = path.relative(this.viewsDir || '', filename).replace(path.sep, '/');\n    }\n  }\n  return compiled;\n};\n\n/**\n * Registers an asynchronous helper.\n *\n * @param {String} name The name of the partial as used in a template.\n * @param {String} fn The `function(options, cb)`\n */\nExpressHbs.prototype.registerAsyncHelper = function(name, fn) {\n  this.handlebars.registerHelper(name, function(context, options) {\n    if (options && fn.length > 2) {\n      var resolver = function(arr, cb) {\n        return fn.call(this, arr[0], arr[1], cb);\n      };\n\n      return async.resolve(resolver.bind(this), [context, options]);\n    }\n\n    return async.resolve(fn.bind(this), context);\n  });\n};\n\nExpressHbs.prototype.updateTemplateOptions = function(templateOptions) {\n  this._options.templateOptions = templateOptions;\n};\n\n/**\n * Creates a new instance of ExpressHbs.\n */\nExpressHbs.prototype.create = function() {\n  return new ExpressHbs();\n};\n\n/**\n * express 3.x, 4.x template engine compliance\n *\n * @param {String} filename Full path to template.\n * @param {Object} options Is the context or locals for templates. {\n *  {Object} settings - subset of Express settings, `settings.views` is\n *                      the views directory\n * }\n * @param {Function} cb The callback expecting the rendered template as a string.\n *\n * @example\n *\n * Example options from express\n *\n *      {\n *        settings: {\n *           'x-powered-by': true,\n *           env: 'production',\n *           views: '/home/coder/barc/code/express-hbs/example/views',\n *           'jsonp callback name': 'callback',\n *           'view cache': true,\n *           'view engine': 'hbs'\n *         },\n *         cache: true,\n *\n *         // the rest are app-defined locals\n *         title: 'My favorite veggies',\n *         layout: 'layout/veggie'\n *       }\n */\nExpressHbs.prototype.___express = function ___express(filename, source, options, cb) {\n  // support running as a gulp/grunt filter outside of express\n  if (arguments.length === 3) {\n    cb = options;\n    options = source;\n    source = null;\n  }\n\n  this.viewsDir = options.settings.views || this.viewsDirOpt;\n  var self = this;\n\n  /**\n   * Allow a layout to be declared as a handlebars comment to remain spec\n   * compatible with handlebars.\n   *\n   * Valid directives\n   *\n   *  {{!< foo}}                      # foo.hbs in same directory as template\n   *  {{!< ../layouts/default}}       # default.hbs in parent layout directory\n   *  {{!< ../layouts/default.html}}  # default.html in parent layout directory\n   */\n  function parseLayout(str, filename, cb) {\n    var layoutFile = self.declaredLayoutFile(str, filename);\n    if (layoutFile) {\n      self.cacheLayout(layoutFile, options.cache, cb);\n    } else {\n      cb(null, null);\n    }\n  }\n\n  /**\n   * Renders `template` with given `locals` and calls `cb` with the\n   * resulting HTML string.\n   *\n   * @param template\n   * @param locals\n   * @param cb\n   */\n  function renderTemplate(template, locals, cb) {\n    var res;\n\n    try {\n      res = template(locals, self._options.templateOptions);\n    } catch (err) {\n      if (err.message) {\n        err.message = '[' + template.__filename + '] ' + err.message;\n      } else if (typeof err === 'string') {\n        return cb('[' + template.__filename + '] ' + err, null);\n      }\n      return cb(err, null);\n    }\n\n    // Wait for async helpers\n    async.done(function(values) {\n      // Save for layout. Block helpers are called within layout, not in the\n      // current template.\n      self.asyncValues = values;\n\n      Object.keys(values).forEach(function(id) {\n        res = res.replace(id, values[id]);\n        res = res.replace(self.Utils.escapeExpression(id), self.Utils.escapeExpression(values[id]));\n      });\n      cb(null, res);\n    });\n  }\n\n\n  /**\n   * Renders `template` with an optional set of nested `layoutTemplates` using\n   * data in `locals`.\n   */\n  function render(template, locals, layoutTemplates, cb) {\n    if (!layoutTemplates) layoutTemplates = [];\n\n    // We'll render templates from bottom to top of the stack, each template\n    // being passed the rendered string of the previous ones as `body`\n    var i = layoutTemplates.length - 1;\n\n    var _stackRenderer = function(err, htmlStr) {\n      if (err) return cb(err);\n\n      if (i >= 0) {\n        locals.body = htmlStr;\n        renderTemplate(layoutTemplates[i--], locals, _stackRenderer);\n      } else {\n        cb(null, htmlStr);\n      }\n    };\n\n    // Start the rendering with the innermost page template\n    renderTemplate(template, locals, _stackRenderer);\n  }\n\n\n  /**\n   * Lazy loads js-beautify, which should not be used in production env.\n   */\n  function loadBeautify() {\n    if (!self.beautify) {\n      self.beautify = require('js-beautify').html;\n      var rc = path.join(process.cwd(), '.jsbeautifyrc');\n      if (fs.existsSync(rc)) {\n        self.beautifyrc = JSON.parse(fs.readFileSync(rc, 'utf8'));\n      }\n    }\n  }\n\n  /**\n   * Gets the source and compiled template for filename either from the cache\n   * or compiling it on the fly.\n   */\n  function getSourceTemplate(cb) {\n    if (options.cache) {\n      var info = self.cache[filename];\n      if (info) {\n        return cb(null, info.source, info.template);\n      }\n    }\n\n    fs.readFile(filename, 'utf8', function(err, source) {\n      if (err) return cb(err);\n\n      var template = self.compile(source, filename);\n      if (options.cache) {\n        self.cache[filename] = {\n          source: source,\n          template: template\n        };\n      }\n      return cb(null, source, template);\n    });\n  }\n\n  /**\n   * Compiles a file into a template and a layoutTemplate, then renders it above.\n   */\n  function compileFile(locals, cb) {\n    getSourceTemplate(function(err, source, template) {\n      if (err) return cb(err);\n\n      // Try to get the layout\n      parseLayout(source, filename, function(err, layoutTemplates) {\n        if (err) return cb(err);\n\n        function renderIt(layoutTemplates) {\n          if (self._options.beautify) {\n            return render(template, locals, layoutTemplates, function(err, html) {\n              if (err) return cb(err);\n              loadBeautify();\n              return cb(null, self.beautify(html, self.beautifyrc));\n            });\n          }\n          return render(template, locals, layoutTemplates, cb);\n        }\n\n        // Determine which layout to use\n\n        if (typeof options.layout !== 'undefined' && !options.layout) {\n          // If options.layout is falsy, behave as if no layout should be used - suppress defaults\n          renderIt(null);\n        } else if (layoutTemplates) {\n          // 1. Layout specified in template\n          renderIt(layoutTemplates);\n        } else if (typeof options.layout !== 'undefined' && options.layout) {\n          // 2. Layout specified by options from render\n          var layoutFile = self.layoutPath(filename, options.layout);\n          self.cacheLayout(layoutFile, options.cache, function(err, layoutTemplates) {\n            if (err) return cb(err);\n            renderIt(layoutTemplates);\n          });\n        } else if (self.defaultLayoutTemplates) {\n          // 3. Default layout specified when middleware was configured.\n          renderIt(self.defaultLayoutTemplates);\n        } else {\n          // render without a template\n          renderIt(null);\n        }\n      });\n    });\n  }\n\n  // kick it off by loading default template (if any)\n  this.loadDefaultLayout(options.cache, function(err) {\n    if (err) return cb(err);\n\n    // Force reloading of all partials if caching is not used. Inefficient but there\n    // is no loading partial event.\n    if (self.partialsDir && (!options.cache || !self.isPartialCachingComplete)) {\n      return self.cachePartials(function(err) {\n        if (err) return cb(err);\n        return compileFile(options, cb);\n      });\n    }\n\n    return compileFile(options, cb);\n  });\n};\n\nmodule.exports = new ExpressHbs();\n","/home/travis/build/npmtest/node-npmtest-express-hbs/node_modules/express-hbs/lib/async.js":"'use strict';\n\n/// provides the async helper functionality\n\nvar alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_';\n\nfunction genId() {\n  var res = '';\n  for (var i = 0; i < 8; ++i) {\n    res += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n  return res;\n}\n\n// global baton which contains the current\n// set of deferreds\nvar waiter;\n\nfunction Waiter() {\n  var self = this;\n  // found values\n  self.values = {};\n  // callback when done\n  self.callback = null;\n  self.resolved = false;\n  self.count = 0;\n}\n\nWaiter.prototype.wait = function() {\n  var self = this;\n  ++self.count;\n};\n\n// resolve the promise\nWaiter.prototype.resolve = function(name, val) {\n  var self = this;\n  self.values[name] = val;\n  // done with all items\n  if (--self.count === 0) {\n    self.resolved = true;\n    // we may not have a done callback yet\n    if (self.callback) {\n      self.callback(self.values);\n    }\n  }\n};\n\n// sets the done callback for the waiter\n// notifies when the promise is complete\nWaiter.prototype.done = function(fn) {\n  var self = this;\n\n  self.callback = fn;\n  if (self.resolved) {\n    fn(self.values);\n    // free mem\n    Object.keys(self.values).forEach(function(id) {\n      self.values[id] = null;\n    });\n  }\n};\n\n// callback fn when all async helpers have finished running\n// if there were no async helpers, then it will callback right away\nWaiter.done = function(fn) {\n  // no async things called\n  if (!waiter) {\n    return fn({});\n  }\n  waiter.done(fn);\n  // clear the waiter for the next template\n  waiter = undefined;\n};\n\nWaiter.resolve = function(fn, context) {\n  // we want to do async things, need a waiter for that\n  if (!waiter) {\n    waiter = new Waiter();\n  }\n  var id = '__aSyNcId_<_' + genId() + '__';\n  var curWaiter = waiter;\n  waiter.wait();\n  fn(context, function(res) {\n    curWaiter.resolve(id, res);\n  });\n  // return the id placeholder, which is replaced later\n  return id;\n};\n\nmodule.exports = Waiter;\n","/home/travis/build/npmtest/node-npmtest-express-hbs/node_modules/express-hbs/gruntfile.js":"module.exports = function configureGrunt(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n\n    mochacli: {\n      options: {\n        ui: 'bdd',\n        reporter: 'spec'\n      },\n\n      all: {\n        src: ['test/*.js']\n      }\n    },\n\n    release: {\n      github: {\n        repo: 'barc/express-hbs',\n        accessTokenVar: 'GITHUB_ACCESS_TOKEN'\n      }\n    }\n  });\n\n  grunt.registerTask('setProductionEnv', function () {\n    // Use 'production' config\n    process.env.NODE_ENV = 'production';\n  });\n\n  grunt.loadNpmTasks('grunt-mocha-cli');\n  grunt.loadNpmTasks('grunt-release');\n\n  // Run tests\n  grunt.registerTask('default', ['mochacli:all', 'setProductionEnv', 'mochacli:all']);\n};\n"}